@page "/"
@using DnDCharacterCalculator.Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h5>Hello, @player1.Name!</h5>

<label for="name">Name:</label>
<br>
<input type="text" id="name" name="name" @bind="@player1.Name" @onblur="LoadCharacterAsync">
<br>
<br>

@if (classOptionList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label for="charclass">Class:</label>
    <br>
    <input type="text" id="level" name="level" maxlength="2" size="1" @bind="@player1.Level" @onblur="LoadCharacterAsync">
    <select name="charclass" id="charclass" @bind="@player1.CharClass" @onblur="LoadCharacterAsync">
        @foreach (var c in classOptionList)
        {
            <option value="@c.Name">@c.Name</option>
        }
    </select>
}

@if (player1.CharClass == "Select Class" || player1.CharClass == "")
{
    <br>
    <br>
    <p><em>Select first class to unlock multiclass</em></p>
}
else
{
    <br>
    <br>
    <label for="charclass2">Multi Class:</label>
    <br>
    <input type="text" id="level2" name="level2" maxlength="2" size="1" @bind="@player1.Level2" @onblur="LoadCharacterAsync">
    <select name="charclass2" id="charclass2" @bind="@player1.CharClass2" @onblur="LoadCharacterAsync">
        @foreach (var c in classOptionList)
        {
            <option value="@c.Name">@c.Name</option>
        }
    </select>
}
<br>
<br>

<label for="str">Strength:</label>
<br>
<input type="text" id="str" name="str" @bind="@player1.Strength" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="strMod" name="strMod" @bind="@player1.StrMod" maxlength="2" size="1" readonly>
<br>

<label for="dex">Dexterity:</label>
<br>
<input type="text" id="dex" name="dex" @bind="@player1.Dexterity" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="dexMod" name="dexMod" @bind="@player1.DexMod" maxlength="2" size="1" readonly>
<br>

<label for="con">Constitution:</label>
<br>
<input type="text" id="con" name="con" @bind="@player1.Constitution" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="conMod" name="conMod" @bind="@player1.ConMod" maxlength="2" size="1" readonly>
<br>

<label for="int">Intelligence:</label>
<br>
<input type="text" id="int" name="int" @bind="@player1.Intelligence" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="dexMod" name="dexMod" @bind="@player1.IntMod" maxlength="2" size="1" readonly>
<br>

<label for="wis">Wisdom:</label>
<br>
<input type="text" id="wis" name="wis" @bind="@player1.Wisdom" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="wisMod" name="wisMod" @bind="@player1.WisMod" maxlength="2" size="1" readonly>
<br>

<label for="cha">Charisma:</label>
<br>
<input type="text" id="cha" name="cha" @bind="@player1.Charisma" @onblur="LoadCharacterAsync" maxlength="2" size="1">
<input type="text" id="chaMod" name="chaMod" @bind="@player1.ChaMod" maxlength="2" size="1" readonly>
<br>

@* upload json file of character in the future <input type="file"/>*@
<br>
<button class="btn btn-primary" @onclick="LoadCharacter">Load Character</button>
<br>

@code
{
    //My breakpoint in blazor
    //JsRuntime.InvokeVoidAsync("console.log", message)

    //Declaration

    //Declare class parameter player
    public Character player1;

    //Declare class clss list instance
    List<Class> classOptionList = new List<Class>();

    //Initilization

    //Inializes page onload
    protected override async Task OnInitializedAsync()
    {
        //Create new instance of player1 on load
        player1 = new Character("You", 0, "", 0, "", 10, 10, 10, 10, 10, 10);
        //Fill up class list instance from a json file
        classOptionList = await Http.GetFromJsonAsync<List<Class>>("../../Data/classes.json");
    }

    //Page Methods

    //Will create a new object from the player class
    private void LoadCharacter()
    {
        player1 = new Character
        (
            player1.Name
           , player1.Level
           , player1.CharClass
           , player1.Level2
           , player1.CharClass2
           , player1.Strength
           , player1.Dexterity
           , player1.Constitution
           , player1.Intelligence
           , player1.Wisdom
           , player1.Charisma
        );
    }

    //Loads a method asyncronously when triggered from a button
    private async Task LoadCharacterAsync(FocusEventArgs e)
    {
        await Task.Delay(500);
        LoadCharacter();
    }
}